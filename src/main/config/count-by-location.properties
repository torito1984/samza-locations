# Job
job.factory.class=org.apache.samza.job.yarn.YarnJobFactory
job.name=count-by-location

# YARN
yarn.package.path=file://${basedir}/target/${project.artifactId}-${pom.version}-dist.tar.gz

# Task
task.class=es.dmr.doyle.samza.CountByLocationTask
task.inputs=kafka.group-by-location
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.system=kafka
task.checkpoint.replication.factor=1

# Serializers
serializers.registry.json.class=org.apache.samza.serializers.JsonSerdeFactory
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
serializers.registry.integer.class=org.apache.samza.serializers.IntegerSerdeFactory

# Systems
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.msg.serde=json
systems.kafka.samza.key.serde=string
systems.kafka.consumer.zookeeper.connect=localhost:2181/
systems.kafka.consumer.auto.offset.reset=smallest
systems.kafka.producer.bootstrap.servers=localhost:6667

# Key-value storage
stores.count-by-location.factory=org.apache.samza.storage.kv.RocksDbKeyValueStorageEngineFactory
stores.count-by-location.changelog=kafka.count-by-location
stores.count-by-location.key.serde=string
stores.count-by-location.msg.serde=json

stores.user-info.changelog.replication.factor=1

stores.user-info.write.batch.size=0
stores.user-info.object.cache.size=0

# Job Coordinator
job.coordinator.system=kafka